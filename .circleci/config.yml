version: 2.1

# Define the jobs we want to run for this project
jobs:
  test:
    docker:
      - image: cimg/python:3.9.6
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: pip install virtualenv poetry invoke && virtualenv ./venv && echo "source ./venv/bin/activate" >> $BASH_ENV
          name: Create virtualenv
      - restore_cache:
          keys:
              - python-cache-4-{{ arch }}-{{ checksum "requirements.txt" }}
      - run: 
          command: poetry install
          name: Install dependencies
      - save_cache:
          key: python-cache-4-{{ arch }}-{{ checksum "requirements.txt" }}
          paths:
              - venv
      - run:
          command: inv lint --check
          name: Run linting
      - run:
          command: PYTHONPATH=$(pwd)/app FLASK_ENV=testing pytest
          name: Run tests
  build_deploy:
    docker:
      - image: cimg/python:3.9.6
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
              - python-cache-3-{{ arch }}-{{ checksum "requirements.txt" }}
      - run:
          command: pip install virtualenv poetry invoke && virtualenv ./venv && echo "source ./venv/bin/activate" >> $BASH_ENV
          name: Create virtualenv
      - run: 
          command: poetry install
          name: Install dependencies
      - save_cache:
          key: python-cache-3-{{ arch }}-{{ checksum "requirements.txt" }}
          paths:
              - venv
      - run:
          command: inv deploy
          name: Run build and deploy

# Orchestrate our job run sequence
workflows:
  test_build_deploy:
    jobs:
      - test
      - build_deploy:
          filters:
            branches:
                only:
                    - main
          requires:
              - test